package optProblems;

import java.io.BufferedWriter;
import java.io.File;
import java.io.FileWriter;
import java.io.IOException;
import java.io.PrintWriter;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

import dist.DiscreteDependencyTree;
import dist.DiscreteUniformDistribution;
import dist.Distribution;

import opt.DiscreteChangeOneNeighbor;
import opt.EvaluationFunction;
import opt.GenericHillClimbingProblem;
import opt.HillClimbingProblem;
import opt.NeighborFunction;
import opt.OptimizationAlgorithm;
import opt.RandomizedHillClimbing;
import opt.SimulatedAnnealing;
import opt.example.*;
import opt.ga.CrossoverFunction;
import opt.ga.DiscreteChangeOneMutation;
import opt.ga.GenericGeneticAlgorithmProblem;
import opt.ga.GeneticAlgorithmProblem;
import opt.ga.MutationFunction;
import opt.ga.StandardGeneticAlgorithm;
import opt.ga.UniformCrossOver;
import opt.prob.GenericProbabilisticOptimizationProblem;
import opt.prob.MIMIC;
import opt.prob.ProbabilisticOptimizationProblem;
import shared.FixedIterationTrainer;

/**
 * 
 * @author Andrew Guillory gtg008g@mail.gatech.edu
 * @version 1.0
 */
public class CountOnesProblem {
    /** The n value */
    private static final int N = 80;
    
    public static void main(String[] args) {
        int[] ranges = new int[N];
        Arrays.fill(ranges, 2);
        EvaluationFunction ef = new CountOnesEvaluationFunction();
        Distribution odd = new DiscreteUniformDistribution(ranges);
        NeighborFunction nf = new DiscreteChangeOneNeighbor(ranges);
        MutationFunction mf = new DiscreteChangeOneMutation(ranges);
        CrossoverFunction cf = new UniformCrossOver();
        Distribution df = new DiscreteDependencyTree(.1, ranges); 
        
        HillClimbingProblem hcp = new GenericHillClimbingProblem(ef, odd, nf);
        GeneticAlgorithmProblem gap = new GenericGeneticAlgorithmProblem(ef, odd, mf, cf);
        ProbabilisticOptimizationProblem pop = new GenericProbabilisticOptimizationProblem(ef, odd, df);
        
        RandomizedHillClimbing rhc = new RandomizedHillClimbing(hcp);      
        FixedIterationTrainer fit = new FixedIterationTrainer(rhc, 200);
        fit.train();
        System.out.println(ef.value(rhc.getOptimal()));
        
        SimulatedAnnealing sa = new SimulatedAnnealing(100, .95, hcp);
        fit = new FixedIterationTrainer(sa, 200);
        fit.train();
        System.out.println(ef.value(sa.getOptimal()));
        
        StandardGeneticAlgorithm ga = new StandardGeneticAlgorithm(20, 20, 0, gap);
        fit = new FixedIterationTrainer(ga, 300);
        fit.train();
        System.out.println(ef.value(ga.getOptimal()));
        
        MIMIC mimic = new MIMIC(50, 10, pop);
        fit = new FixedIterationTrainer(mimic, 100);
        fit.train();
        System.out.println(ef.value(mimic.getOptimal()));
        
        
        
        // add names and algorithms
        List<String> names = new ArrayList<>();
        List<OptimizationAlgorithm> algs = new ArrayList<>();
        names.add("RHC");
        names.add("SA");
        names.add("GA");
        names.add("MIMC");
        algs.add(rhc);
        algs.add(sa);
        algs.add(ga);
        algs.add(mimic);
        
        // check fitness to find iterations to converge
        int maxIters = 100;
        List<List<Double>> fitnessValues = new ArrayList<>();
        List<Integer> numOfIters = new ArrayList<>();
        for(int i = 10; i < maxIters; i += 10) numOfIters.add(i);
        for (int i = 0; i < algs.size(); i++){
        	System.out.println("Start converge analysis of " + names.get(i));
            CheckConverge cc = new CheckConverge(mimic, ef, maxIters);
            List<Double> fitness = cc.fitnessValue();
            fitnessValues.add(fitness);
            System.out.println("Completed converge analysis of " + names.get(i));
        }
        outputFitnessData("FitnessDataTSP.csv", numOfIters, fitnessValues);


        // optimize params
        List<Integer> params1 = new ArrayList<>();
        List<Double> params2 = new ArrayList<>();
        String name = "SA";
        OptParams op = new OptParams(hcp, ef, name);
        List<Double> fitnessParams = op.trainFunction(params1, params2);
        
        // vote for the best algorithm
        int trials = 50;
        int bestIters = 0;
        BestAlg bestAlg = new BestAlg(algs, names, ef, trials);
        List<Object> bestVote= bestAlg.voteAlg(bestIters);
        
    }
    
    public static void outputFitnessData(String fileName, List<Integer> iters, List<List<Double>> values){
    	//output
        File file = new File(fileName);
        FileWriter writer;
    	   try {
    		   writer = new FileWriter(file);
    	       PrintWriter pwtr = new PrintWriter(new BufferedWriter(writer));
    	       pwtr.println("Number of iters, FitnessRHC, FitnessSA, "
    	       		       + "FitnessGA, FitnessMIMIC");
    	       for(int i = 0; i < iters.size(); i++) {
    	           pwtr.println(iters.get(i) + "," + values.get(0).get(i) + "," 
    	                       + values.get(1).get(i) + "," + values.get(2).get(i)
    	                       + "," + values.get(3).get(i));
    	       }
    	       pwtr.close();
    	       System.out.println("Fitness data written to file SUCCEED!");
    	    } catch (IOException e) {
    		// TODO Auto-generated catch block
    		   e.printStackTrace();
    		   System.out.println("Fitness data written to file FAIL!");
    	  }
    }
}