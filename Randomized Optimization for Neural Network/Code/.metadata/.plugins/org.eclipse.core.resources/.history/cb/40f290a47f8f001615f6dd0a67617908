/**
 * 
 */
package AnnAnalysis;

import func.nn.backprop.BackPropagationNetwork;
import opt.OptimizationAlgorithm;
import opt.RandomizedHillClimbing;
import opt.example.NeuralNetworkOptimizationProblem;
import shared.DataSet;
import shared.ErrorMeasure;

/**
 * @author zhihuixie
 *
 */
public class Optimization {
	BackPropagationNetwork clf;
	ErrorMeasure measure;
	String oaName;
	NeuralNetworkOptimizationProblem nnop;
	/**
	 * @param clf
	 * @param measure
	 * @param oaName
	 */
	public Optimization(BackPropagationNetwork clf, ErrorMeasure measure, String oaName){
		this.clf = clf;
		this.measure = measure;
		this.oaName = oaName;
	}
	
	public void setOA(){
		
		if (this.oaName.equals(""))
	}
	
	public void trainModel(DataSet data){
		nnop = new NeuralNetworkOptimizationProblem(data, this.clf, this.measure);
		if (this.oaName.equals("RHC")){
			OptimizationAlgorithm oa = new RandomizedHillClimbing(nnop);
		}
	}

}
