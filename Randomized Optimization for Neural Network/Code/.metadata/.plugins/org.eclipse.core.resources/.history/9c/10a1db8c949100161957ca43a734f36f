/**
 * 
 */
package optProblems;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import opt.EvaluationFunction;
import opt.OptimizationAlgorithm;
import shared.FixedIterationTrainer;

/**
 * @author zhihuixie
 *
 */
public class BestAlg {
	List<OptimizationAlgorithm> algs;
	int trials;
	EvaluationFunction ef;
	List<String> names;
	
	public BestAlg(List<OptimizationAlgorithm> algs,List<String> names, 
			       EvaluationFunction ef, int trials) {
		// TODO Auto-generated constructor stub
		this.algs = algs;
		this.trials = trials;
		this.ef = ef;
		this.names = names;
	}

	public List<Object> voteAlg(int iters) {
		List<Object> voteInfo = new ArrayList<>();
		// TODO Auto-generated method stub
		double maxScore = 0.0;
		int count;
		double time;
		String name;
		Map<String, Integer> counter = new HashMap<>();
		Map<String, Double> runTime = new HashMap<>();
		for (int i = 0; i < this.trials; i++){
			for (int j = 0; j < this.algs.size(); j++){
				double timeStart = System.nanoTime();
	        	name = names.get(j);
		        FixedIterationTrainer fit = new FixedIterationTrainer(this.algs.get(j), iters);
		        fit.train();
	        	if (runTime.containsKey(name)){
	        		time = runTime.get(name) + (System.nanoTime() - timeStart)/1E9;
	        		runTime.put(name, time);
	        	}
	        	else{
	        		runTime.put(name, (System.nanoTime() - timeStart)/1E9);
	        	}
		        if(maxScore < this.ef.value(this.algs.get(j).getOptimal())){
		        	maxScore = this.ef.value(this.algs.get(j).getOptimal());
		        	if (counter.containsKey(name)){
		        		count = counter.get(name);
		        		counter.put(name, count);
		        	}
		        	else{
		        		counter.put(name, 1);
		        	}
		        	
		        }
			}

		}
		voteInfo.add(counter);
		voteInfo.add(runTime);
		return voteInfo;
	}

}
